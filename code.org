*** C lanuage
unistd.h 环境Linux
nanosleep() 秒级延时
usleep() 毫秒级延时, 单位微秒
stdio.h
printf() 输出
?: 三目条件运算符号, 1?2:3 if (1) 2 else 3
scanf() 输入
strlen(const char *)可获得字符大小(是通过转化为符号后计算大小)
atoi 包含于 <stdio.h> 返回int
strtol() 返回long
malloc分配长度为num_bytes字节的内存块(memory allocation)，可以向系统申请分配指定size个字节的内存空间.
dword(double word), 每个word为两字节, dword为4字节 
*** org mode
\[
\alpha, \beta and \gamma.
a_{1}
a^{5}
\]

\begin{equation}
\sum\limits_{i=1}^n(Z_i * t)
\end{equation}

\begin{equation}
\frac{1^p+2^p+\cdot\cdot\cdot+n^p}{n^{1+p}}
\end{equation}

\[
\stackrel{abc}{\longrightarrow}
\]

I am $op_1\stackrel{abc}{\longrightarrow}op_2$
\[
\times
\]
\begin{equation}
Y=\left\{
\begin{aligned}
+1 & , & if & & X \geq \theta \\
-1 & , & if & & X < \theta
\end{aligned}
\right
\end{equation}

org-entiles-help 查看完整entities
C-c C-x C-l 预览
~org latex size~
#+BEGIN_SRC elisp
(require 'org)
(setq org-format-latex-options (plist-put org-format-options :scale 2.0))
#+END_SRC
*** C++
foreach
map [[https://blog.csdn.net/qq_41700151/article/details/81231688][{1}]] reverse_iterator,反序排列
memset
memcpy
类继承public，protected，private [[https://www.cnblogs.com/anSn/p/8763167.html][{1}]]
strlen可获取数组指针的长度
#+BEGIN_SRC cpp
char buf[2048];
memset(buf, 0 ,2048);
memcpy(buf,datagram.data(),size);
buf[size] = '\0';
msg=QString(buf);
emit SignalForRM_DataRec(msg);
#+END_SRC
[[https://www.cnblogs.com/do-your-best/p/11140491.html][数组指针和指针数组]]
*** QT
QT 获取系统时间Qdatetime
sleep(1) 暂停一秒
Qtimer [[https://www.cnblogs.com/doker/p/11150053.html][{1}]]
QByteArray [[https://www.e-learn.cn/content/qita/695559][{1}]] [[https://bbs.csdn.net/topics/360039473?list=1504051][{2}]]
QVector [[https://blog.csdn.net/zhangxuechao_/article/details/81942336][{1}]]
QList
QlinkedList
QVarLengthArray
Qmap
Qhash [[https://blog.csdn.net/weixin_39832367/article/details/85710986][{1}]]
Qfile
evenFilter/installEvenFilter
QBuffer
Qdatastream [[https://wenku.baidu.com/view/d5bf96425727a5e9846a6174.html][{1}]] [[https://blog.csdn.net/Aidam_Bo/article/details/85213030][{2}]]
#+BEGIN_SRC c++
QDataStream in (&array, QIODevice::ReadOnly);
in.setVersion(QDataStream::Qt_4_8);
out<<(quint32) 0;
out.device()->seek(0);
out << (quint32)(block.size()- sizeof(quint32));
out << (unsigned char)0x02;

//this -> show;
//qApp -> processEvents();
#+END_SRC

reinterpret_cast, static_cast, dynamic_cast and const_cast are the c++ cast alternatives.
const_cast to remove const/volatile from a const variable.
dynamic_cast to perform runtime validity checks when casting in between polymorphic types
static_cast to perform e.g up/down-cast in a inheritance hierarchy, but with no runtime checks, or to explicitly perform conversions that could be implicit (e.g. float to int)
reinterpret_cast to convert in between unrelated types.

QLabel [[https://blog.csdn.net/qq_37233607/article/details/78160822][{1}]]

QDebug()
Q_ASSERT()
QListWidget [[https://blog.csdn.net/Q1302182594/article/details/46120321][{1}]]
QNetworkInterface [[https://blog.csdn.net/qq78442761/article/details/81187013][{1}]]
*** Google
ProtoBuf
*** Python
Python Operator
| Operator | Operate          | Example        | Value | Priority |
| **       | index            | 2 ** 3         |     8 |        1 |
| %        | modulo           | 22 % 6         |     6 |        2 |
| //       | round            | 22 // 8        |     2 |        2 |
| /        | divide           | 22 / 8         |  2.75 |        2 |
| *        | multiply         | 3 * 5          |    15 |        2 |
| -        | minus            | 5 - 2          |     3 |        3 |
| +        | Plus             | 2 + 2          |     4 |        3 |
| ==       | equal            |                |       |        4 |
| !=       | not equal        |                |       |        4 |
| <        | less than        |                |       |        4 |
| >        | greater than     |                |       |        4 |
| <=       | equal or less    |                |       |        4 |
| >=       | equal or greater |                |       |        4 |
| and      |                  | True and False | Flase |        6 |
| or       |                  | True or False  |  True |        7 |
| not      |                  | not True       | False |        5 |
Python Data Structure
| Data  | Example        |
| int   | -2, 0, 8       |
| float | -1.35 0.8, 4.5 |
| strs  | 'aa', 'Hello'  |
| True  | Boolean, true  |
| Flase | Boolean, false |
strs * int 
#+begin_src python
>>> 'Alice'*5
'AliceAliceAliceAliceAlice'
#+end_src
Python Functions
| Functions | Description                          | Example              |
| print()   | print strings, input strs or int eg. | print{'Hellw world'} |
| input()   | input strings, output string         | my name = input()    |
| len()     | length of string,  output int        | len('hello')         |
| str()     | convert to str                       |                      |
| int()     | convert to int                       |                      |
| float()   | convert to float                     |                      |
| help()    | help on built-on function            |                      |
| round()   | round                                |                      |
| list()    | convert to list                      |                      |
csv module
pandas module [[https://zhuanlan.zhihu.com/p/340441922][read_csv]]
#+begin_src python
import pandas as pd
pd.read_csv(filepath_or_buffer) # 可以是问难路径或者 URL
# 里面还可以是一个 _io.TextIOWrapper，比如：
f = open("girl.csv", encoding="utf-8")
pd.read_csv(f)
#+end_src
1. csv文件有表头并且是第一行，那么names和header都无需指定;
2. csv文件有表头、但表头不是第一行，可能从下面几行开始才是真正的表头和数据，这个时候指定header即可;
3. csv文件没有表头，全部是纯数据，那么我们可以通过names手动生成表头;
4. csv文件有表头、但是这个表头你不想用，这个时候同时指定names和header。先用header选出表头和数据，然后再用names将表头替换掉，就等价于将数据读取进来之后再对列名进行rename；

pandas dataframe 数据格式
np.pad array扩充
np.pad(item, (0,2), 'constant', constant_values=('0'))
*** Shell
#+begin_src bash
cat /etc/shells # 查看当前 Linux 系统的可用 Shell
echo $SHELL # 查看当前 Linux 的默认 Shell
 #+end_src
对于普通用户，Base shell 默认的提示符是美元符号$；对于超级用户（root 用户），Bash Shell 默认的提示符是井号#.
在 Shell 中初次输入命令，使用的是 PS1 指定的提示符格式；如果输入一个命令后还需要输入附加信息，Shell 就使用 PS2 指定的提示符格式
#+begin_src  bash
echo $PS2
%_>
#+end_src
“#!” 是一个约定的标记，它告诉系统这个脚本需要什么解释器来执行，即使用哪一种Shell。echo命令用于向窗口输出文本.
#+begin_src bash
echo "What is your name?"
read PERSON
echo "Hello, $PERSON"
#+end_src
脚本使用 read 命令从 stdin 获取输入并赋值给 PERSON 变量，最后在 stdout 上输出
变量名外面的花括号{ }是可选的，加不加都行，加花括号是为了帮助解释器识别变量的边界
如果变量的内容是数字，那么可以不加引号；如果真的需要原样输出就加单引号；其他没有特别要求的字符串等最好都加上双引号，定义变量时加双引号是最常见的使用场景

使用 readonly 命令可以将变量定义为只读变量，只读变量的值不能被改变
使用 unset 命令可以删除变量

$$ 表示当前Shell进程的ID
#+begin_src bash
echo $$
#+end_src
shell 可以包含其他sh脚本使用
#+begin_src bash
#!/bin/bash
. ./subscript.sh
echo $url
#+end_src

chown [-cfhvR] [--help] [--version] user[:group] file...
    user : 新的文件拥有者的使用者 ID
    group : 新的文件拥有者的使用者组(group)
    -c : 显示更改的部分的信息
    -f : 忽略错误信息
    -h :修复符号链接
    -v : 显示详细的处理信息
    -R : 处理指定目录以及其子目录下的所有文件
    --help : 显示辅助说明
    --version : 显示版本
    #+begin_src bash
    chown root /var/run
    #+end_src
*** vscode
C-S L 批量修改变量名或函数名
C-S K kill a line
左键双击 选中当前句段
